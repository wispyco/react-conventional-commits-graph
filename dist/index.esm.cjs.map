{"version":3,"file":"index.esm.cjs","sources":["../src/components/CommitChart.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\nconst emojiMap = {\n  bugs: \"üêõ\",\n  features: \"‚ú®\",\n  chores: \"üßπ\", // Example emoji for chores\n  fixes: \"üîß\", // Example emoji for fixes\n  // others: \"üì¶\", // Example emoji for others\n  docs: \"üìù\",\n  refactor: \"‚ôªÔ∏è\",\n};\n\nconst emojiPlugin = {\n  id: \"emojiPlugin\",\n  afterDraw: (chart) => {\n    const ctx = chart.ctx;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const meta = chart.getDatasetMeta(datasetIndex);\n      meta.data.forEach((bar, index) => {\n        const emoji = emojiMap[chart.data.labels[index]];\n        const { x, y, base, width, height } = bar;\n        const dataValue = dataset.data[index]; // The number of emojis we want to show\n\n        // Calculate the number of rows and columns of emojis based on the data value\n        const numRows = Math.ceil(Math.sqrt(dataValue));\n        const numCols = Math.ceil(dataValue / numRows);\n\n        // Calculate the size of each emoji to fit the bar's dimensions\n        const emojiWidth = width / numCols;\n        const emojiHeight = height / numRows;\n        const emojiSize = Math.min(emojiWidth, emojiHeight); // Use the smallest to fit both dimensions\n\n        ctx.font = `${emojiSize}px Arial`;\n\n        // Draw the emojis in a grid pattern\n        // for (let row = 0; row < numRows; row++) {\n        //   for (let col = 0; col < numCols; col++) {\n        //     if (row * numCols + col < dataValue) { // Ensure we don't draw more emojis than the data value\n        //       const emojiX = x - width / 2 + col * emojiWidth;\n        //       const emojiY = base - (numRows - row) * emojiHeight; // Start from the bottom of the bar\n        //       ctx.fillText(emoji, emojiX, emojiY);\n        //     }\n        //   }\n        // }\n        // ... rest of your plugin code\n\n        // Draw the emojis in a grid pattern\n        for (let row = 0; row < numRows; row++) {\n          for (let col = 0; col < numCols; col++) {\n            if (row * numCols + col < dataValue) {\n              // Ensure we don't draw more emojis than the data value\n              const emojiX = x - width / 2 + col * emojiWidth;\n              const emojiY = base - emojiHeight - row * emojiHeight; // Adjusted to start from the bottom\n              // Save the context and rotate the canvas around the emoji's center\n              ctx.save();\n              ctx.translate(emojiX + emojiSize / 2, emojiY + emojiSize / 2);\n              ctx.rotate(Math.PI); // Rotate 180 degrees\n              ctx.fillText(emoji, -emojiSize / 2, -emojiSize / 2);\n              ctx.restore(); // Restore the context to the original state for the next emoji\n            }\n          }\n        }\n\n        // ... rest of your plugin code\n      });\n    });\n  },\n};\n\n// Register the necessary components for Chart.js\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n);\nChartJS.register(emojiPlugin); // Register the custom plugin\n\nconst CommitChart = () => {\n  const [commitData, setCommitData] = useState({\n    labels: [],\n    datasets: [],\n  });\n\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/commitMessages.json\");\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const commitMessages = await response.json();\n\n        // Process your commit messages to get the data for the chart\n        // Assuming you process the data to the format Chart.js expects\n        // Example: { labels: ['Label1', 'Label2'], datasets: [{ data: [1, 2] }] }\n        const processedData = processData(commitMessages);\n\n        // If the chart already exists, update it\n        if (chartRef.current) {\n          chartRef.current.data = processedData;\n          chartRef.current.update();\n        } else {\n          setCommitData(processedData); // Set data for initial chart rendering\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch commit messages:\", error);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array means this effect runs once after the first render\n\n  const options = {\n    scales: {\n      x: {\n        beginAtZero: true,\n      },\n      y: {\n        // Additional options for the Y-axis can be set here\n      },\n    },\n    maintainAspectRatio: true,\n    responsive: true,\n    plugins: {\n      // ... other plugin configurations\n      emojiPlugin: {}, // This is just to enable the plugin\n    },\n  };\n\n  return (\n    <div>\n      <h2>Commit Chart</h2>\n      <Bar ref={chartRef} data={commitData} options={options} />\n    </div>\n  );\n};\n\nexport default CommitChart;\n\n// Helper function to process the raw data\nfunction processData(commitMessages) {\n  const counts = {\n    bugs: 0,\n    features: 0,\n    chores: 0,\n    fixes: 0,\n    // others: 0,\n    docs: 0,\n    refactor:0,\n  };\n\n  commitMessages.forEach((msg) => {\n    if (msg.includes(\"bug:\") || msg.includes(\"üêõ\")) {\n      counts.bugs++;\n    } else if (msg.includes(\"feat:\") || msg.includes(\"‚ú®\")) {\n      counts.features++;\n    } else if (msg.includes(\"chore:\")) {\n      counts.chores++;\n    } else if (msg.includes(\"fix:\")) {\n      counts.fixes++;\n    } else if (msg.includes(\"docs:\")) {\n      counts.docs++;\n    } else if (msg.includes(\"refactor:\")) {\n      counts.refactor++;\n    }\n    //  else {\n    // counts.others++; // Count all other commits as 'others'\n    // }\n  });\n\n  return {\n    labels: Object.keys(counts),\n    datasets: [\n      {\n        label: \"Number of Commits\",\n        data: Object.values(counts),\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\", // color for bugs\n          \"rgba(54, 162, 235, 0.2)\", // color for features\n          \"rgba(255, 206, 86, 0.2)\", // color for chores\n          \"rgba(75, 192, 192, 0.2)\", // color for fixes\n          \"rgba(153, 102, 255, 0.2)\", // color for others\n        ],\n        borderColor: [\n          \"rgba(255, 99, 132, 1)\",\n          \"rgba(54, 162, 235, 1)\",\n          \"rgba(255, 206, 86, 1)\",\n          \"rgba(75, 192, 192, 1)\",\n          \"rgba(153, 102, 255, 1)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n}\n"],"names":["emojiMap","bugs","features","chores","fixes","docs","refactor","emojiPlugin","id","afterDraw","chart","ctx","data","datasets","forEach","dataset","datasetIndex","getDatasetMeta","bar","index","emoji","labels","x","base","width","height","dataValue","numRows","Math","ceil","sqrt","numCols","emojiWidth","emojiHeight","emojiSize","min","font","row","col","emojiX","emojiY","save","translate","rotate","PI","fillText","restore","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","_useState","useState","commitData","setCommitData","chartRef","useRef","useEffect","Promise","resolve","body","recover","result","fetch","then","response","ok","Error","json","commitMessages","processedData","counts","msg","includes","Object","keys","label","values","backgroundColor","borderColor","borderWidth","processData","current","update","e","_catch","error","console","reject","fetchData","_jsxs","children","_jsx","jsx","Bar","ref","options","scales","beginAtZero","y","maintainAspectRatio","responsive","plugins"],"mappings":"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"}